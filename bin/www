#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dashboard:server');
var http = require('http');

var socketIO = require('socket.io');
var mqtt = require('mqtt');
var mongoose = require('mongoose');

var config = require('../config');
var mqtt_dash = require('../models/mqtt_dash');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketIO.listen(server);

 // mqtt connection
var mqttUri  = 'mqtt://' + config.mqtt.hostname + ':' + config.mqtt.port;
var client = mqtt.connect(mqttUri);

client.on('connect', function(){
  client.subscribe(config.mqtt.topics);
});

// mongoose connection
var mongoUri = 'mongodb://' + config.mongodb.hostname + ':' + config.mongodb.port + '/' + config.mongodb.database;
mongoose.connect(mongoUri, {useNewUrlParser: true,  useUnifiedTopology: true});
var db = mongoose.connection;
db.on('error', console.error.bind(console, 'db connection error:'));

db.once('open', function() {
  console.log("db Connection Successful!");

  client.on('message', function(topic, message){
 
    // a document instance
    var msg = new mqtt_dash({ 
      topic : topic,
      payload : message.toString(),
      date: new Date().getTime()
    });

    io.emit("mqtt_dash", msg);

    // save model to database
    msg.save(function (err, payload) {
      if (err) return console.error(err);
      console.log("saved to mqtt_dash collection.");
    });
  }); 
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
